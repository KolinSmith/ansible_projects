---
  # - name: install cups
  #   apt:
  #     name: "cups"
  #     state: latest

  - name: set timezone to America/Chicago
    timezone:
      name: America/Chicago

  - name: update repo cache (Debian)
    tags: always
    apt:
      upgrade: yes
      update_cache: yes
      cache_valid_time: "86400"
      autoremove: yes
      autoclean: yes
    ignore_errors: true
    # when: ansible_os_family == "Debian"

  # - name: Add Tailscale signing key
  #   ansible.builtin.apt_key:
  #     url: "{{ tailscale_apt_signkey }}"
  #     state: present
  #     keyring: /etc/apt/trusted.gpg.d/tailscale-keyring.gpg

  # - name: Add Tailscale repo to apt sources
  #   apt_repository:
  #     repo: "{{ tailscale_apt_deb }}"
  #     state: present
  #     filename: "tailscale-{{ ansible_lsb.id | lower }}"

  - name: add packages I want
    apt:
      name: "{{ necessary_packages }}"
      state: latest

  - name: add cups printers.conf file to /etc/cups
    template:
      src: /home/dax/code_base/ansible_projects/templates/cups_printers_dot_conf.j2
      dest: /etc/cups/printer.conf
      owner: root
      group: root
      mode: 0600

  - name: add rsyslog rsyslog.conf file to /etc/rsyslog.conf
    #https://web.archive.org/web/20230102233129/https://www.tecmint.com/install-rsyslog-centralized-logging-in-centos-ubuntu/
    template:
      src: /home/dax/code_base/ansible_projects/templates/rsyslog_dot_conf.j2
      dest: /etc/rsyslog.conf
      owner: root
      group: root
      mode: 0600
    # notify: Reload rsyslog

  - name: add samba smb.conf file to /etc/samba
    #https://web.archive.org/web/20230102233129/https://www.tecmint.com/install-rsyslog-centralized-logging-in-centos-ubuntu/
    template:
      src: /home/dax/code_base/ansible_projects/templates/smb_dot_conf.j2
      dest: /etc/samba/smb.conf
      owner: root
      group: root
      mode: 0600

  - name: create /etc/logrotate.d/ directory
    file:
      path: /etc/logrotate.d/
      state: directory

  - name: touch logrotate files
    file:
      path: /etc/logrotate.d/{{ item }}
      state: touch
      mode: 0644
    with_items:
      - Voyager
      - pfsense
      - borg
      - localhost
      - 192.168.3.1

  - name: add logrotate config file
    template:
      src: /home/dax/code_base/ansible_projects/templates/logrotate_dot_conf.j2
      dest: /etc/logrotate.conf
      owner: root
      group: root
      mode: 0644

  - name: add logrotate files
    lineinfile:
      dest: /etc/logrotate.d/{{ item }}
      state: present
      # mode: 0644
      line: |
        /var/log/{{ item }} {
        weekly
        rotate 2
        compress
        delaycompress
        missingok
        notifempty
        create 660 {{ user }} admin
        }
    with_items:
      - Voyager
      - pfsense
      - borg
      - localhost
      - 192.168.3.1

    # need to add in ansible galaxy collections that I have downloaded!!!!

  # no clue if this works
  #https://gist.github.com/carlessanagustin/af38e4585951dc32a320
  - name: add {{extra_path}} variable to the path 
    lineinfile:
      dest: /etc/environment
      state: present
      backrefs: yes
      regexp: 'PATH=(["]*)((?!.*?{{extra_path}}).*?)(["]*)$'
      line: 'PATH=\1\2:{{extra_path}}\3'

  #https://www.jeffgeerling.com/blog/2017/add-path-global-path-ansible
  - name: Add another bin dir to system-wide $PATH.
    copy:
      dest: /etc/profile.d/custom-path.sh
      content: 'PATH=$PATH:{{ my_custom_path_var }}'

  - name: set hostname
    command: hostnamectl set-hostname {{ hostvars[groups['provision_servers'][0]]['inventory_hostname_short'] }}
    become: true

  - name: change /etc/hosts file to correct hostname
    replace:
      path: /etc/hosts
      regexp: "{{ ansible_nodename }}"
      replace: "{{ hostvars[groups['provision_servers'][0]]['inventory_hostname_short'] }}"

  - name: remove files that came with the template and need to be reset
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - /etc/machine-id
      - /var/lib/dbus/machine-id

  - name: reset the machine ID
    command: "{{ item }}"
    with_items:
      - dbus-uuidgen --ensure=/etc/machine-id
      - dbus-uuidgen --ensure

  #regenerating the keys requires first deleting the ssh_host_* files then running the reconfigure option.
  #they must run in the same task one after the other for it to work.
  - name: regenerate ssh keys
    shell: "{{ item }}"
    ignore_errors: true
    with_items:
      - rm /etc/ssh/ssh_host_*
      - dpkg-reconfigure openssh-server
    become: true
    #handler gets triggered at the end of the playbook run
    # notify: Reload ssh

  - name: add admin group
    group:
      name: admin
      state: present

  - name: add {{ user }} group
    group:
        name: "{{ user }}"
        state: present

  - name: add local user {{ user }}
    user:
      name: "{{ user }}"
      groups: admin
      shell: /bin/zsh
      home: /home/{{ user }}
      create_home: yes
      state: present
      password: "{{ dax_password }}"

  - name: Add local user {{ user }} to sudo
    lineinfile:
      path: /etc/sudoers.d/{{ user }}
      line: '{{ user }} ALL=(ALL) NOPASSWD: ALL'
      state: present
      mode: 0440
      create: yes
      validate: 'visudo -cf %s'

  - name: add SSH public keys for local user
    authorized_key:
        user: "{{ user }}"
        state: present
        key: "{{ item.key }}"
        manage_dir: yes
    with_items:
      - "{{ public_keys }}"

#might end up using the one from the dotfiles
  - name: add sshd config file
    template:
      src: /home/dax/code_base/ansible_projects/templates/sshd_config.j2
      dest: /etc/ssh/sshd_config
      owner: root
      group: root
      mode: 0600
      validate: /usr/sbin/sshd -t -f %s
      backup: yes
    # notify: Reload ssh

  - name: make sure voyager ssh private key is installed
    copy:
      content: '{{ voyager_private_ssh_key }}'
      dest: '/home/{{ user }}/.ssh/id_ecdsa'
      owner: "{{ user }}"
      group: "{{ user }}"
      mode: 0600
    no_log: true

  - name: create ~/.zshrc file for local user
    file:
      path: /home/{{ user }}/.zshrc
      state: touch
      mode: 0644
      owner: "{{ user }}"

  - name: Check for Oh My ZSH Installation
    stat:
      path: ~/.oh-my-zsh
    become_user: "{{ user }}"
    register: omz_installed

  - name: Install Oh My ZSH
    git:
      repo: 'https://github.com/ohmyzsh/ohmyzsh.git'
      dest: ~/.oh-my-zsh
    become_user: "{{ user }}"
    when: omz_installed.stat.exists == False

  - name: Checkout powerlevel10k repo and use refspec to fetch all pull requests
    git:
      repo: https://github.com/romkatv/powerlevel10k.git
      dest: /home/{{ user }}/.oh-my-zsh/custom/themes/powerlevel10k
      refspec: '+refs/pull/*:refs/heads/*'
      depth: 1

  - name: Checkout zsh-autosuggestions repo and use refspec to fetch all pull requests
    git:
      repo: https://github.com/zsh-users/zsh-autosuggestions
      dest: /home/{{ user }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      refspec: '+refs/pull/*:refs/heads/*'

  # not needed since it's in Ubuntu repos already. executable is "batcat". alias to "bat"
  # - name: import the install_bat role
  #   import_role:
  #     name: install_bat

  #for some reason even with the when it still goes into each task
  #in the role and skips it one by one
  - name: import the install_exa role
    import_role:
      name: install_exa
    ignore_errors: true
    when:  (ansible_machine == "x86_64") or (ansible_machine == "armv7l")

  # - name: import the import_dotfiles role
  #   import_role:
  #     name: import_dotfiles

  - name: Check if tmuxinator plugin manager is installed.
    stat:
      path: /home/{{ user }}/.tmux/plugins/tpm
    register: tpm_installed

  - name: Create tmux plugin directory
    file:
      state: directory
      path: /home/{{ user }}/.tmux/plugins

  - name: Install tmux plugin manager
    git:
      repo: 'https://github.com/tmux-plugins/tpm'
      dest: /home/{{ user }}/.tmux/plugins/tpm
    when: tpm_installed.stat.exists == False

  # have this happen after a restart
  # - name: Setup Tailscale
  #   command: tailscale up --authkey={{ tailscale_auth_key }}

  # have this happen after a restart
  # - name: Setup Docker & Docker Compose
  #   import_role:
  #     name: install_docker

  - name: Create code_base directory
    file:
      state: directory
      path: /home/{{ user }}/code_base/

  - name: Create code_base directories
    file:
      path: "{{ item }}"
      state: directory
      owner: dax
      group: admin
    loop:
      - /home/{{ user }}/code_base/
      - /home/{{ user }}/code_base/ansible_projects
      - /home/{{ user }}/github_backups
      - /home/{{ user }}/code_base/docker_projects
      - /home/{{ user }}/code_base/terraform_projects
      - /home/{{ user }}/code_base/dotfiles



### Need to clone the rest of my repos and a few others


  - name: clone ansible_projects repository to {{ inventory_hostname }}
    git:
      repo: "{{ ansible_projects_repo }}"
      dest: /tmp/tmp-ansible-projects
      accept_hostkey: yes
      force: yes
      recursive: no
      key_file: /home/{{ user }}/.ssh/id_ecdsa
    delegate_to: "{{ inventory_hostname }}"
    run_once: true

  - name: move ansible_projects into ~/code_base/
    # synchronize:
    #   mode: pull
    #   src: /tmp/tmp-ansible-projects
    #   dest: /home/{{ user }}/code_base/
    #   rsync_opts:
    #   - "--remove-source-files"
    # delegate_to: "{{ inventory_hostname }}"
    copy:
      src: /tmp/tmp-ansible-projects/
      dest: /home/{{ user }}/code_base/ansible_projects
      owner: "{{ user }}"
      group: admin
      remote_src: true

  - name: Create /etc/ansible directory if it doesn't exist
    file:
      path: /etc/ansible
      state: directory
      mode: '0755'
      owner: {{ user }}
      group: admin
    become: yes

  - name: Create symbolic link to ansible.cfg
    file:
      src: "/home/{{ user }}/code_base/ansible_projects/ansible.cfg"
      dest: /etc/ansible/ansible.cfg
      state: link
      force: yes
    become: yes


  # #copy the files from localhost to the remote machine
  # - name: copy ansible_projects into ~/code_base/ansible_projects
    # copy:
    #   src: /tmp/tmp-ansible-projects/{{ item }}
    #   dest: "/home/{{ user }}/code_base/ansible_projects/{{ item }}"
    #   owner: "{{ user }}"
    #   group: "admin"
    # with_items:
    #   - deprecated_playbooks
    #   # - facts
    #   - group_vars
    #   - playbooks
    #   - python_scripts
    #   - roles
    #   - shell_scripts
    #   - templates
    #   - README.md
    #   - ansible.cfg
    #   - ansible.cfg.EXAMPLE
    #   - ansible.log
    #   - hosts
    #   - hosts.yml.EXAMPLE
    #   - k3s_hosts

  # - name: clone github-backup repository to {{ inventory_hostname }}
  #   git:
  #     repo: "{{ github_backup_repo }}"
  #     dest: /tmp/tmp-github-backup
  #     accept_hostkey: yes
  #     force: yes
  #     recursive: no
  #     key_file: /home/{{ user }}/.ssh/id_ecdsa
  #   delegate_to: "{{ inventory_hostname }}"
  #   run_once: true

  # - name: move github-backup into ~/code_base/
  #   # synchronize:
  #   #   mode: pull
  #   #   src: /tmp/tmp-github-backup
  #   #   dest: /home/{{ user }}/code_base/
  #   #   rsync_opts:
  #   #   - "--remove-source-files"
  #   # delegate_to: "{{ inventory_hostname }}"
  #   copy:
  #     src: /tmp/tmp-github-backup/
  #     dest: /home/{{ user }}/github-backup-application
  #     owner: "{{ user }}"
  #     group: admin
  #     remote_src: true
  
  # https://github.com/KolinSmith/GitHub-Backup#readme-ov-file
  - name: Install github-backup python package
    ansible.builtin.pip:
      name: git+https://github.com/clockfort/GitHub-Backup


  - name: clone dotfiles repository to {{ inventory_hostname }}
    git:
      repo: "{{ dotfiles_repo }}"
      dest: /tmp/tmp-dotfiles
      accept_hostkey: yes
      force: yes
      recursive: no
      key_file: /home/{{ user }}/.ssh/id_ecdsa
    delegate_to: "{{ inventory_hostname }}"
    run_once: true

  - name: move dotfiles into ~/code_base/
    copy:
      src: /tmp/tmp-dotfiles/
      dest: /home/{{ user }}/code_base/dotfiles
      owner: "{{ user }}"
      group: admin
      remote_src: true


  - name: clone docker_projects repository to {{ inventory_hostname }}
    git:
      repo: "{{ docker_projects_repo }}"
      dest: /tmp/tmp-docker_projects
      accept_hostkey: yes
      force: yes
      recursive: no
      key_file: /home/{{ user }}/.ssh/id_ecdsa
    delegate_to: "{{ inventory_hostname }}"
    run_once: true

  - name: move docker_projects into ~/code_base/
    # synchronize:
    #   mode: pull
    #   src: /tmp/tmp-github-backup
    #   dest: /home/{{ user }}/code_base/
    #   rsync_opts:
    #   - "--remove-source-files"
    # delegate_to: "{{ inventory_hostname }}"
    copy:
      src: /tmp/tmp-docker_projects/
      dest: /home/{{ user }}/code_base/docker_projects
      owner: "{{ user }}"
      group: admin
      remote_src: true  


  - name: clone terraform_projects repository to {{ inventory_hostname }}
    git:
      repo: "{{ terraform_projects_repo }}"
      dest: /tmp/tmp-terraform_projects
      accept_hostkey: yes
      force: yes
      recursive: no
      key_file: /home/{{ user }}/.ssh/id_ecdsa
    delegate_to: "{{ inventory_hostname }}"
    run_once: true

  - name: move terraform_projects into ~/code_base/
    # synchronize:
    #   mode: pull
    #   src: /tmp/tmp-github-backup
    #   dest: /home/{{ user }}/code_base/
    #   rsync_opts:
    #   - "--remove-source-files"
    # delegate_to: "{{ inventory_hostname }}"
    copy:
      src: /tmp/tmp-terraform_projects/
      dest: /home/{{ user }}/code_base/terraform_projects
      owner: "{{ user }}"
      group: admin
      remote_src: true  

  - name: Remove ls aliases from .zshrc if exa isn't installed
    lineinfile:
      path: /home/dax/.zshrc
      regexp: "{{ item }}"
      state: absent
      backup: yes
    with_items:
      - ls="exa --git"
      - lsd="exa -a -l -i --git -H"
   #when raspberry not pi 1 or pi zero which are both armv6l
    when: not (ansible_machine == "x86_64") or (ansible_machine == "armv7l")

  # - name: delete dotfiles from /tmp
  #   file:
  #     state: absent
  #     path: /tmp/tmp-ansible-projects

  - name: import the install_rsyslog_server role
    import_role:
      name: install_rsyslog_server

  # - name: import the figurine (login banner) role
  #   import_role:
  #     name: IronicBadger.figurine

  - name: create cron jobs
    block:
      - name: create github-backup job
        cron:
          name: github_backup
          minute: "0"
          hour: "4"
          job: "github-backup KolinSmith -p {{ github_personal_access_token }} /home/{{ user }}/github_backups && curl -fsS -m 10 --retry 5 -o /dev/null 192.168.3.7:8013/ping/0e28c1ba-2933-4981-96f3-5a8634c93f2c"
        become_user: "{{ user }}"

      # - name: create piHoleUpdate job
      #   cron:
      #     name: piHoleUpdate
      #     minute: "0"
      #     hour: "3"
      #     day: "3"
      #     job: "ansible-playbook /home/dax/code_base/ansible_projects/playbooks/piHoleUpdate/piHoleUpdate.yml -i /home/dax/code_base/ansible_projects/hosts"

      - name: create reconnectUnifi job
        cron:
          name: reconnectUnifi
          minute: "0"
          hour: "2"
          job: "ansible-playbook ~/code_base/ansible_projects/playbooks/reconnectUnifi/reconnectUnifi.yml && curl -fsS -m 10 --retry 5 -o /dev/null 192.168.3.7:8013/ping/fde13bd7-10af-4762-b3d3-112c805b3e33"
        become_user: "{{ user }}"

  - name: turn off swap
    command: sudo dphys-swapfile swapoff
    become: true
    when: raspberry_pi == true

  - name: increase size of swap file to 1GB
    replace:
      path: /etc/dphys-swapfile
      regexp: 'CONF_SWAPSIZE=100'
      replace: 'CONF_SWAPSIZE=1024' 
    when: raspberry_pi == true

  - name: turn on swap
    command: sudo dphy-swapfile setup
    become: true
    when: raspberry_pi == true

  #https://web.archive.org/web/20240205053108/https://forum.yunohost.org/t/armbian-zram-var-log-full-and-email-notifications-every-15-minutes/26295
  - name: Disable armbian-ramlog on Orange Pis
    lineinfile:
      path: /etc/default/armbian-ramlog
      regexp: '^Enabled='
      line: 'Enabled=false'
    when: orange_pi == true

  - name: Disable armbian-zram-config on Orange Pis
    lineinfile:
      path: /etc/default/armbian-zram-config
      regexp: '^Enabled='
      line: 'Enabled=false'
    when: orange_pi == true

  - name: Create scripts folder
    file: 
      path: ~/.scripts
      state: directory
      mode: '0755'
      owner: '{{ user }}'
      group: admin

  - name: Copy git cleanup script
    copy:
      content: |
        #!/bin/bash

        # Check if we're in a git repository
        if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
            echo "Error: Not in a git repository"
            exit 1
        fi

        # Get current branch name
        current_branch=$(git branch --show-current)

        # Check if main or master exists and switch to it
        if git show-ref --verify --quiet refs/heads/main; then
            target_branch="main"
        elif git show-ref --verify --quiet refs/heads/master; then
            target_branch="master"
        else
            echo "Error: Neither main nor master branch found"
            exit 1
        fi

        # Switch to target branch if not already on it
        if [ "$current_branch" != "$target_branch" ]; then
            echo "Switching to $target_branch branch..."
            git checkout "$target_branch" || exit 1
        fi

        # Pull latest changes
        echo "Pulling latest changes..."
        git pull || exit 1

        # Delete merged branches
        echo "Deleting merged branches..."
        git branch --merged "$target_branch" | grep -v "^\*" | grep -v "$target_branch" | xargs -r git branch -d

        # Prune remote references
        echo "Pruning remote references..."
        git remote prune origin

        # Final pull to ensure everything is up to date
        echo "Final pull..."
        git pull

        echo "Cleanup complete!"
      dest: /usr/local/bin/cleanup-merged-branches.sh
      mode: '0755'


  # need to reboot machine to make sure processes use new swap space
  - name: Reboot the machine (Wait for 60 sec)
    reboot:
      reboot_timeout: 60
    ignore_errors: true
