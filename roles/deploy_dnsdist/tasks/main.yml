---
    #learned the hard way that when installing dnsdist on the raspberry pi that you need to make sure your distro is supported
    #I had installed raspbian bullseye on the pi zeroes, but dndist only had a build for raspbian buster so I had to reinstall with buster

    # - name: add SSH public key for borg so it can login to make backups
    #   authorized_key:
    #       user: "{{ user }}"
    #       key: "ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOax0ZYUe5CpSHS+h4dPYEOpZs/aUbUol5b4ypwPV9jEdNsBUateQhzwtSXZJbosW4VpGIBtfQVhFgaJri2Fftc= root@Borg"
    #       state: present
    #       manage_dir: yes

  # so on Raspbian, dnsdist only supports Buster, but on Debian & Ubuntu it supports latest so I'm commenting this out unless I start using Raspbian again

    #check if running x86 or something and download different repo
    # - name: create repo source file for dnsdist when raspberry pi
    #   copy:
    #     dest: "/etc/apt/sources.list.d/pdns.list"
    #     content: |
    #         deb http://repo.powerdns.com/{{ hostvars[inventory_hostname]['ansible_distribution'] }} {{ hostvars[inventory_hostname]['ansible_lsb']['codename'] }}-dnsdist-master main

    # - name: create repo source file for dnsdist when not raspberry pi
    #   copy:
    #     dest: "/etc/apt/sources.list.d/pdns.list"
    #     content: |
    #         deb http://repo.powerdns.com/raspbian {{ hostvars[inventory_hostname]['ansible_lsb']['codename'] }}-dnsdist-master main
    #   when: raspberry_pi|default(false) #when raspberry pi

    # - name: add apt key
    #   apt_key:
    #     url: https://repo.powerdns.com/CBC8B383-pub.asc
    #     state: present


###################################################
# Install DNSDIST from Source if Raspbian
###################################################
    - name: Install build dependencies
      apt:
        name:
          - git
          - g++
          - make
          - automake
          - autoconf
          - ragel
          - libboost-all-dev
          - libluajit-5.1-dev
          - libsodium-dev
          - libedit-dev
          - pkg-config
        update_cache: yes
      when: is_raspbian|default(false) #when OS is Raspbian


    - name: Clone PowerDNS repository
      git:
        repo: https://github.com/PowerDNS/pdns.git
        dest: /tmp/pdns
        depth: 1
      when: is_raspbian|default(false) #when OS is Raspbian


    - name: Run autoreconf
      command:
        cmd: autoreconf -i
        chdir: /tmp/pdns/pdns/dnsdistdist
        creates: /tmp/pdns/pdns/dnsdistdist/configure
      when: is_raspbian|default(false) #when OS is Raspbian

    - name: Configure build
      command:
        cmd: ./configure
        chdir: /tmp/pdns/pdns/dnsdistdist
      when: is_raspbian|default(false) #when OS is Raspbian

    - name: Build dnsdist
      command:
        cmd: make -j1
        chdir: /tmp/pdns/pdns/dnsdistdist
      when: is_raspbian|default(false) #when OS is Raspbian

    - name: Install dnsdist
      command:
        cmd: make install
        chdir: /tmp/pdns/pdns/dnsdistdist
      when: is_raspbian|default(false) #when OS is Raspbian

###################################################
###################################################
###################################################

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
      when: is_ubuntu|default(false)

    - name: Download PowerDNS GPG key
      get_url:
        url: https://repo.powerdns.com/FD380FBB-pub.asc
        dest: /etc/apt/keyrings/dnsdist-19-pub.asc
      when: is_ubuntu|default(false)

    - name: Create dnsdist repository file
      copy:
        dest: "/etc/apt/sources.list.d/dnsdist.list"
        content: |
          deb [signed-by=/etc/apt/keyrings/dnsdist-19-pub.asc] http://repo.powerdns.com/ubuntu {{ ansible_distribution_release }}-dnsdist-19 main
      when: is_ubuntu|default(false)

    - name: Create dnsdist preferences file
      copy:
        dest: "/etc/apt/preferences.d/dnsdist-19"
        content: |
          Package: dnsdist*
          Pin: origin repo.powerdns.com
          Pin-Priority: 600
      when: is_ubuntu|default(false)   
  
    - name: Install dnsdist packages
      apt:
        name: dnsdist
        state: latest

    - name: Update, Upgrade, & Clean
      tags: always
      apt:
        upgrade: yes
        update_cache: yes
        #had to comment out this line in order to get it to update dnsdist
        #since the cache time was very low from just running the provision script
        # cache_valid_time: "86400"
        autoremove: yes
        autoclean: yes
      ignore_errors: yes

    #print current host's ip address
    #- debug: msg="{{ hostvars[item]['ansible_eth0']['ipv4']['address'] }}"

    #print alias that I set in the hosts file for the second entry in the dns_servers group
    # - debug: msg="{{ hostvars[groups['dns_servers'][1]]['inventory_hostname_short'] }}"

    #print the ip address I set in the hosts file for the second entry in the dns_servers group
    # - debug: msg="{{ hostvars[groups['dns_servers'][1]]['ansible_host'] }}"

    #print ip address of the host that the play is being run against
    # - debug: msg="{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
###################################################
###################################################
###################################################


    - name: Create dnsdist user group
      group:
        name: dnsdist
        state: present

    - name: Create dnsdist user
      user:
        name: dnsdist
        group: dnsdist
        shell: /sbin/nologin
        system: yes

    - name: Set dnsdist ownership and permissions
      file:
        path: /etc/dnsdist
        owner: dnsdist
        group: dnsdist
        recurse: yes
  
###################################################
###################################################
###################################################
#https://dnsdist.org/reference/config.html
#https://web.archive.org/web/2/https://chriskirby.net/load-balanced-and-highly-avaialble-local-dns-with-dnsdist-and-keepalived/

    - name: create dnsdist preferences
      copy:
        dest: /etc/dnsdist/dnsdist.conf
        content: |
          addLocal("0.0.0.0:53") 
          addLocal("[::]:53")
          setACL({"192.168.0.0/16"}) 
          webserver("{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:80")
          setWebserverConfig({
            password="nilok3",
            acl="192.168.3.0/24",
            dashboardRequiresAuthentication=true,
            apiRequiresAuthentication=true
          })
          setLocal("{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:53")
          warnlog(string.format("Script starting %s", "up!"))
          newServer({address="{{ hostvars[groups['dns_servers'][0]]['ansible_host'] | default(groups['dns_servers'][0]) }}", name="{{ hostvars[groups['dns_servers'][0]]['inventory_hostname_short'] }}"})
          newServer({address="{{ hostvars[groups['dns_servers'][1]]['ansible_host'] | default(groups['dns_servers'][1]) }}", name="{{ hostvars[groups['dns_servers'][1]]['inventory_hostname_short'] }}"})
          setServerPolicy(leastOutstanding)
        owner: dnsdist
        group: dnsdist
        mode: '0644'

    # - debug: msg="{{ primary_load_balancer }}"

    # - debug: msg="{{ keepalived_password }}"

    #this config creates a VIP, sets a password, and sets the backend servers (for this it's dns loadbalancers using port 53)
    - name: create keepalived config file for primary
      copy:
        dest: /etc/keepalived/keepalived.conf
        content: |
          vrrp_instance VIP_1 {
            state MASTER
            interface {{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}
            virtual_router_id 55
            priority 150
            advert_int 1
            unicast_src_ip {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
            unicast_peer {
              {{ secondary_load_balancer }}
            }

            authentication {
              auth_type PASS
              auth_pass {{ keepalived_password }}
            }

            virtual_ipaddress {
              192.168.9.90/24
            }
          }
          virtual_server {{ loadbalancer_vip_ip }} 53 {
            delay_loop 6
            lb_algo wlc
            protocol UDP

            real_server {{ primary_load_balancer }} 53 {
              weight 100
              MISC_CHECK {
                connect_timeout 6
              }
            }

            real_server {{ secondary_load_balancer }} 53 {
              weight 100
              MISC_CHECK {
                connect_timeout 6
              }
            }
          }

      #run when node is primary load balancer
      when: hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == primary_load_balancer

      #keepalived password has to be at max 8 characters
    - name: create keepalived config file for secondary
      copy:
        dest: /etc/keepalived/keepalived.conf
        content: |
          vrrp_instance VIP_1 {
            state BACKUP
            interface {{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}
            virtual_router_id 55
            priority 100
            advert_int 1
            unicast_src_ip {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
            unicast_peer {
              {{ primary_load_balancer }}
            }
              authentication {
                auth_type PASS
                auth_pass {{ keepalived_password }}
            }
              virtual_ipaddress {
                192.168.9.90/24
            }
          }
          virtual_server {{ loadbalancer_vip_ip }} 53 {
            delay_loop 6
            lb_algo wlc
            protocol UDP

            real_server {{ primary_load_balancer }} 53 {
              weight 100
              MISC_CHECK {
                connect_timeout 6
              }
            }

            real_server {{ secondary_load_balancer }} 53 {
              weight 100
              MISC_CHECK {
                connect_timeout 6
              }
            }
          }
      #run when node is primary load balancer
      when: hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == secondary_load_balancer

    # - name: allow DNS(53) traffic incoming
    #   firewalld:
    #     zone: public
    #     port: 53/udp
    #     permanent: true
    #     interface: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}"
    #     state: enabled

    #gave me the same glob patterns error
    - name: enable and start services
      service:
        name: "{{ item }}"
        state: restarted
        enabled: yes
      loop:
        - keepalived
        - dnsdist
      register: service_result
      failed_when: false
      
    #   #systemd doesn't allow glob patterns(ie. enabling or starting multiple things in one commmand) so I had to do each one individually
    # - name: enable dnsdist to run on boot
    #   systemd:
    #     name: dnsdist@dnsdist.service
    #     enabled: yes
    #
    # - name: enable keepalived to run on boot
    #   systemd:
    #     name: keepalived.service
    #     enabled: yes
    #
    # - name: start keepalived
    #   systemd:
    #     name: keepalived
    #     state: restarted
    #
    # - name: restart dnsdist
    #   systemd:
    #     name: dnsdist
    #     state: restarted
