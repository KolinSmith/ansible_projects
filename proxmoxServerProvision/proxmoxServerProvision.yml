---
  - import_playbook: bootstrap_python.yml

  - name: proxmoxServerProvision
    hosts: all
    #remote_user: serveradmin
    become: yes
    #become_user: root
    #become: true
    gather_facts: yes
    vars_prompt:
    - name: hostname
      prompt: What do you want to set as the hostname?
      private: no
    vars:
      - user: 'dax'
      - dotfiles_repo: 'git@github.com:KolinSmith/dotfiles.git'
        necessary_packages:
          - wget
          - net-tools
          - zsh
          - powerline
          - fonts-powerline
          - curl
          - git
          - iputils-ping
          - dnsutils
          - acl
          - sudo
        files_to_be_reset:
          - /etc/machine-id
          - /var/lib/dbus/machine-id
          - /etc/ssh/ssh_host_*
        # allow_world_readable_tmpfiles: true
    #roles:
      #- { role: viasite-ansible.zsh, zsh_user: dax }

    # pre_tasks:
    #   - name: update repo cache (CentOS)
    #     tags: always
    #     dnf:
    #       update_cache: yes
    #     changed_when: false
    #     when: ansible_distribution == "CentOS"
    #
    #   - name: update repo cache (Ubuntu)
    #     tags: always
    #     apt:
    #       upgrade: yes
    #       update_cache: yes
    #       cache_valid_time: 86400
    #       autoremove: yes
    #       autoclean: yes

    tasks:
      # - name: perform full update
      #   apt:
      #     upgrade: yes
      #     update_cache: yes
      #     cache_valid_time: 86400
      - name: add packages I want
        package:
          name: "{{ necessary_packages }}"
          state: latest

      - name: print out user this playbook is running as
        debug:
          msg: "Playbook is being run as: {{ ansible_user_id }}"

      - name: set hostname
#        hostname:
#          name: "{{ hostname }}"
        command: hostnamectl set-hostname {{ hostname }}
        become: true

      - name: change /etc/hosts file to correct hostname
        replace:
          path: /etc/hosts
          regexp: 'template'
          replace: '{{ hostname }}'

      - name: remove files that came with the template and need to be reset
        file:
          path: "{{ files_to_be_reset }}"
          state: absent
        ignore_errors: yes

      - name: reset the machine ID
        command: "{{ item }}"
        with_items:
          # - rm -f /etc/machine-id /var/lib/dbus/machine-id
          - dbus-uuidgen --ensure=/etc/machine-id
          - dbus-uuidgen --ensure

      # - name: regenerate ssh keys
      #   shell: "{{ item }}"
      #   ignore_errors: yes
      #   with_items:
      #     - rm /etc/ssh/ssh_host_*
      #     - dpkg-reconfigure openssh-server > /dev/null
      #   become: yes
      #   notify: Reload SSH

      - name: regenerate ssh keys
        become: yes
        shell: "dpkg-reconfigure openssh-server"
        notify: Reload SSH

      - name: add admin group
        group:
          name: admin
          state: present

      - name: add {{ user }} group
        group:
            name: "{{ user }}"
            state: present

      # - name: import the viasite-ansible role
      #   import_role:
      #     name: viasite-ansible.zsh
      #   vars:
      #     zsh_user: "{{ user }}"

      - name: add local user
        user:
          name: "{{ user }}"
          groups: admin
          shell: /bin/zsh
          home: /home/{{ user }}
          create_home: yes
          state: present
          # password: "nilok3"

      # This should be set in the above task
      # - name: Change local user shell
      #   user:
      #     name: "{{ user }}"
      #     shell: /bin/zsh
      #   become: yes

      - name: Add local user to sudo
        lineinfile:
          path: /etc/sudoers.d/{{ user }}
          line: '{{ user }} ALL=(ALL) NOPASSWD: ALL'
          state: present
          mode: 0440
          create: yes
          validate: 'visudo -cf %s'

      # - name: create sudoers.d file for local user
      #   file:
      #     path: /etc/sudoers.d/{{ user }}
      #     state: touch
      #     mode: '0440'
      #
      # - name: edit sudoers.d file for local user to add in passwordless sudo
      #   blockinfile:
      #       path: /etc/sudoers.d/{{ user }}
      #       block: |
      #         {{ user }} ALL=(ALL:ALL) ALL
      #         %{{ user }} ALL=(ALL:ALL) NOPASSWD:ALL
      #       backup: yes

#      - name: update /etc/hosts files with hostname
#        lineinfile:
#          path: /etc/hosts
#          regexp: '^127\.0\.1\.1[ \t]+template'
#          line: '127.0.1.1 "{{ hostname }}"'
#          state: present

#      - name: perform full patching
#        package:
#          name: '*'
#          state: latest

      - name: add SSH public key for local user
        authorized_key:
            user: "{{ user }}"
            key: "{{ lookup('file', '/home/dax/.ssh/id_ecdsa.pub') }}"
            state: present
            manage_dir: yes

      - name: put ssh public keyfile onto host
        copy:
            src: /home/dax/.ssh/id_ecdsa.pub
            dest: /home/{{ user }}/.ssh/
            owner: "{{ user }}"
            group: admin
            mode: 0700

      - name: put ssh private keyfile onto host
        copy:
            src: /home/dax/.ssh/id_ecdsa
            dest: /home/{{ user }}/.ssh/
            owner: "{{ user }}"
            group: admin
            mode: 0700

#      - name: add sshd config file
#        copy:
#            dest: /etc/ssh/sshd_config
#            src: /etc/ssh/sshd_config
#            owner: root
#            group: root
#            mode: 0600
#        notify: Reload SSH

    #might end up using the one from the dotfiles
      # - name: add sshd config file
      #   template:
      #     src: /home/dax/code_base/ansible_projects/templates/sshd_config.j2
      #     dest: /etc/ssh/sshd_config
      #     owner: root
      #     group: root
      #     mode: 0600
      #     validate: /usr/sbin/sshd -t -f %s
      #     backup: yes
      #   notify: Reload SSH

      - name: create ~/.zshrc file for local user
        file:
          path: /home/{{ user }}/.zshrc
          state: touch
          mode: 0600

      #- name: change default shell to zsh
        #command: chsh -s /usr/bin/zsh
        #command: chsh -s $(which zsh)
        #become_user: "{{ user }}"

      #- name: install oh-my-zshrc
      #  command:  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      #  become_user: "{{ user }}"

      - name: print out user this playbook is running as
        debug:
          msg: "Playbook is being run as: {{ ansible_user_id }} and ansible user is: {{ user }}"

      # - name: fetch oh-my-zsh
      #   get_url:
      #     url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
      #     dest: /tmp/install-oh-my-zsh.sh
      #     mode: 0755

      # - name: install oh-my-zsh
      #   command: zsh /tmp/install-oh-my-zsh.sh
      #   become_user: "{{ user }}"

      - name: Check for Oh My ZSH Installation
        stat:
          path: ~/.oh-my-zsh
        become_user: "{{ user }}"
        register: omz_installed

      - name: Install Oh My ZSH
        git:
          repo: 'https://github.com/ohmyzsh/ohmyzsh.git'
          dest: ~/.oh-my-zsh
        become_user: "{{ user }}"
        when: omz_installed.stat.exists == False

      - name: Checkout powerlevel10k repo and use refspec to fetch all pull requests
        git:
          repo: https://github.com/romkatv/powerlevel10k.git
          dest: /home/{{ user }}${ZSH_CUSTOM:-/home/{{ user }}/.oh-my-zsh/custom}/themes/powerlevel10k
          refspec: '+refs/pull/*:refs/heads/*'
          depth: 1

      # - name: git clone powerlevel10k color theme
      #   command: git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
      #   become_user: "{{ user }}"

      - name: Checkout zsh-autosuggestions repo and use refspec to fetch all pull requests
        git:
          repo: https://github.com/zsh-users/zsh-autosuggestions
          dest: /home/{{ user }}${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
          refspec: '+refs/pull/*:refs/heads/*'

      # - name: fix zsh-autosuggestions
      #   command:  git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
      #   become_user: "{{ user }}"

      - name: clone dotfiles repository to localhost
        git:
          repo: "{{ dotfiles_repo }}"
          dest: ./tmp-dotfiles
          accept_hostkey: yes
          force: yes
          recursive: no
          key_file: /home/dax/.ssh/id_ecdsa
        delegate_to: localhost
        run_once: true
      #
      # - name: copy .zshrc
      #   copy:
      #     src: ./tmp-dotfiles/.zshrc
      #     dest: "/home/{{ user }}/.zshrc"
      #     owner: "{{ user }}"
      #     group: "admin"
      #     mode: '0644'
      #
      # - name: source new .zshrc file
      #   shell: "source /home/{{ user }}/.zshrc"

    handlers:
      - name: Reload SSH
        service:
          name: sshd
          state: reloaded
