---
  - import_playbook: bootstrap_python.yml

  - name: proxmoxServerProvision
    hosts: provision_servers
    gather_facts: yes
    become: yes
    vars_prompt:
    - name: hostname
      prompt: What do you want to set as the hostname?
      private: no
    vars:
      - user: 'dax'
      - dotfiles_repo: 'git@github.com:KolinSmith/dotfiles.git'
        necessary_packages:
          - wget
          - net-tools
          - zsh
          - powerline
          - fonts-powerline
          - curl
          - git
          - iputils-ping
          - dnsutils
          - acl
          - sudo
          - fzf
          - apt-transport-https
          - unattended-upgrades
          - tmux
          - build-essential
          - unzip
          - cmatrix
          - neofetch
          - pigz
        # allow_world_readable_tmpfiles: true
    #roles:
      #- { role: viasite-ansible.zsh, zsh_user: dax }

    pre_tasks:
      - name: update repo cache (CentOS)
        tags: always
        dnf:
          update_cache: yes
        changed_when: false
        when: ansible_distribution == "CentOS"

      - name: update repo cache (Ubuntu)
        tags: always
        apt:
          upgrade: yes
          update_cache: yes
          cache_valid_time: "86400"
          autoremove: yes
          autoclean: yes
        ignore_errors: yes
        when: ansible_distribution == "Ubuntu"


    tasks:
      - name: add packages I want
        package:
          name: "{{ necessary_packages }}"
          state: latest

#############################################################################################################################################################################################
#download and install exa
#############################################################################################################################################################################################

      #got from: https://gist.github.com/steinwaywhw/a4cd19cda655b8249d908261a62687f8
      - name: download latest exa binary into /tmp
        shell: curl -s https://api.github.com/repos/ogham/exa/releases/latest | grep -E 'browser_download_url' | grep linux-x86_64-v | cut -d '"' -f 4 | wget -qi - -O /tmp/exa_binary.zip

      - name: make folder to put unzipped exa binary in
        file:
          state: directory
          path: /tmp/exa_binary

      - name: unzip exa binary
        unarchive:
          src: /tmp/exa_binary.zip
          dest: /tmp/exa_binary
          remote_src: yes

      - name: move exa binary into /usr/local/bin
        file:
          src: /tmp/exa_binary/bin/exa
          dest: /usr/local/bin/exa
          state: hard
        ignore_errors: yes

      - name: move exa man page into /usr/share/man/man1
        file:
          src: /tmp/exa_binary/man/{{ item }}
          dest: /usr/share/man/man1/{{ item }}
          state: hard
        with_fileglob:
          - exa*
        ignore_errors: yes

#need to check if path it is copying into (/usr/local/share/zsh/site-functions) exists before moving

      - name: move exa shell completetion files into /usr/local/share/zsh/site-functions
        file:
          src: /tmp/exa_binary/completions/exa.zsh
          dest: /usr/local/share/zsh/site-functions
          state: hard
        ignore_errors: yes

      - name: delete files from /tmp
        file:
          state: absent
          path: /tmp/{{ item }}
        with_items:
          - exa_binary
          - exa_binary.zip

#############################################################################################################################################################################################
#############################################################################################################################################################################################
#############################################################################################################################################################################################




#############################################################################################################################################################################################
#download and install bat
#############################################################################################################################################################################################

      - name: download latest bat binary into /tmp
        shell: curl -s https://api.github.com/repos/sharkdp/bat/releases/latest | grep -E 'browser_download_url' | grep 'x86_64-unknown-linux-gnu' | cut -d '"' -f 4 | wget -qi - -O /tmp/bat_binary.tar.gz
        become: yes

      - name: make folder to put unzipped bat binary in
        file:
          state: directory
          path: /tmp/bat_binary

      - name: unzip bat binary
        unarchive:
          src: /tmp/bat_binary.tar.gz
          dest: /tmp/bat_binary
          remote_src: yes

      - name: move bat binary into /usr/local/bin
        file:
          src: /tmp/bat_binary/{{ item }}/bat
          dest: /usr/local/bin/bat
          state: hard
        with_fileglob:
          - bat-*

      # - name: move bat man page into /usr/share/man/man1
      #   file:
      #     src: /tmp/bat_binary/bat-v0.18.2-aarch64-unknown-linux-gnu/bat.1
      #     dest: /usr/share/man/man1/bat.1
      #     state: hard

      - name: move bat man page into /usr/share/man/man1
        file:
          src: /tmp/bat_binary/"{{ item }}"/bat.1
          dest: /usr/share/man/man1/bat.1
          state: hard
        with_fileglob:
          - "bat-"

      - name: debug
        debug:
          msg: "HEY THERE!!!"

#need to check if path it is copying into (/usr/local/share/zsh/site-functions) exists before moving

      - name: move bat shell completetion files into /usr/local/share/zsh/site-functions
        file:
          src: /tmp/bat_binary/{{ item }}/autocomplete/bat.zsh
          dest: /usr/local/share/zsh/site-functions
          state: hard
        with_fileglob:
          - bat-*

      # - name: delete files from /tmp
      #   file:
      #     state: absent
      #     path: /tmp/{{ item }}
      #   with_items:
      #     - bat_binary
      #     - bat_binary.tar.gz

#############################################################################################################################################################################################
#############################################################################################################################################################################################
#############################################################################################################################################################################################

      - name: set hostname
#        hostname:
#          name: "{{ hostname }}"
        command: hostnamectl set-hostname {{ hostname }}
        become: true

      - name: change /etc/hosts file to correct hostname
        replace:
          path: /etc/hosts
          regexp: 'template'
          replace: '{{ hostname }}'

      - name: remove files that came with the template and need to be reset
        file:
          path: "{{ item }}"
          state: absent
        with_items:
          - /etc/machine-id
          - /var/lib/dbus/machine-id

      - name: reset the machine ID
        command: "{{ item }}"
        with_items:
          - dbus-uuidgen --ensure=/etc/machine-id
          - dbus-uuidgen --ensure

      #regenerating the keys requires first deleting the ssh_host_* files then running the reconfigure option.
      #they must run in the same task one after the other for it to work.
      - name: regenerate ssh keys
        shell: "{{ item }}"
        ignore_errors: yes
        with_items:
          - rm /etc/ssh/ssh_host_*
          - dpkg-reconfigure openssh-server
        become: yes
        notify: Reload SSH

      # possible problems with this part
      # - name: Configure Unattended Updates
      #   lineinfile:
      #     path: /etc/apt/apt.conf.d/50unattended-upgrades
      #     regexp: "{{ item.line }}"
      #     line: "{{ item.new }}"
      #   # untested at the moment - should work
      #   loop:
      #     - { line: '^(//)?      "o=Debian(,a=stable)?"', new: '      "o=Debian"'}
      #     - { line: '^(//)?Unattended-Upgrade::MinimalSteps ".*";', new: 'Unattended-Upgrade::MinimalSteps "true";'}
      #     - { line: '^(//)?Unattended-Upgrade::Remove-Unused-Dependencies ".*";', new: 'Unattended-Upgrade::Remove-Unused-Dependencies "true";'}
      #     - { line: '^(//)?Unattended-Upgrade::Automatic-Reboot ".*";', new: 'Unattended-Upgrade::Automatic-Reboot "false";'}
      #     - { line: '^(//)?Unattended-Upgrade::Automatic-Reboot-WithUsers ".*";', new: 'Unattended-Upgrade::Automatic-Reboot-WithUsers "true";'}
      #   notify:
      #    - Restart Unattended Upgrades

      - name: add admin group
        group:
          name: admin
          state: present

      - name: add {{ user }} group
        group:
            name: "{{ user }}"
            state: present

      # - name: import the viasite-ansible role
      #   import_role:
      #     name: viasite-ansible.zsh
      #   vars:
      #     zsh_user: "{{ user }}"

      - name: add local user {{ user }}
        user:
          name: "{{ user }}"
          groups: admin
          shell: /bin/zsh
          home: /home/{{ user }}
          create_home: yes
          state: present

      - name: Add local user {{ user }} to sudo
        lineinfile:
          path: /etc/sudoers.d/{{ user }}
          line: '{{ user }} ALL=(ALL) NOPASSWD: ALL'
          state: present
          mode: 0440
          create: yes
          validate: 'visudo -cf %s'

      # - name: create sudoers.d file for local user
      #   file:
      #     path: /etc/sudoers.d/{{ user }}
      #     state: touch
      #     mode: '0440'
      #
      # - name: edit sudoers.d file for local user to add in passwordless sudo
      #   blockinfile:
      #       path: /etc/sudoers.d/{{ user }}
      #       block: |
      #         {{ user }} ALL=(ALL:ALL) ALL
      #         %{{ user }} ALL=(ALL:ALL) NOPASSWD:ALL
      #       backup: yes

#      - name: update /etc/hosts files with hostname
#        lineinfile:
#          path: /etc/hosts
#          regexp: '^127\.0\.1\.1[ \t]+template'
#          line: '127.0.1.1 "{{ hostname }}"'
#          state: present

#      - name: perform full patching
#        package:
#          name: '*'
#          state: latest

      - name: add SSH public key for local user
        authorized_key:
            user: "{{ user }}"
            key: "{{ lookup('file', '/home/dax/.ssh/id_ecdsa.pub') }}"
            state: present
            manage_dir: yes

    #might end up using the one from the dotfiles
      - name: add sshd config file
        template:
          src: /home/dax/code_base/ansible_projects/templates/sshd_config.j2
          dest: /etc/ssh/sshd_config
          owner: root
          group: root
          mode: 0600
          validate: /usr/sbin/sshd -t -f %s
          backup: yes
        notify: Reload SSH

      - name: create ~/.zshrc file for local user
        file:
          path: /home/{{ user }}/.zshrc
          state: touch
          mode: 0600

      - name: Check for Oh My ZSH Installation
        stat:
          path: ~/.oh-my-zsh
        become_user: "{{ user }}"
        register: omz_installed

      - name: Install Oh My ZSH
        git:
          repo: 'https://github.com/ohmyzsh/ohmyzsh.git'
          dest: ~/.oh-my-zsh
        become_user: "{{ user }}"
        when: omz_installed.stat.exists == False

      - name: Checkout powerlevel10k repo and use refspec to fetch all pull requests
        git:
          repo: https://github.com/romkatv/powerlevel10k.git
          dest: /home/{{ user }}/.oh-my-zsh/custom/themes/powerlevel10k
          refspec: '+refs/pull/*:refs/heads/*'
          depth: 1

      - name: Checkout zsh-autosuggestions repo and use refspec to fetch all pull requests
        git:
          repo: https://github.com/zsh-users/zsh-autosuggestions
          dest: /home/{{ user }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions
          refspec: '+refs/pull/*:refs/heads/*'

      - name: clone dotfiles repository to localhost
        git:
          repo: "{{ dotfiles_repo }}"
          dest: /tmp/tmp-dotfiles
          accept_hostkey: yes
          force: yes
          recursive: no
          key_file: /home/dax/.ssh/id_ecdsa
        delegate_to: localhost
        run_once: true

      - name: copy .zshrc & p10k.zsh
        copy:
          src: /tmp/tmp-dotfiles/{{ item }}
          dest: "/home/{{ user }}/{{ item }}"
          owner: "{{ user }}"
          group: "admin"
          mode: '0644'
        with_items:
          - .zshrc
          - .p10k.zsh
          - .tmux.conf

      - name: source new .zshrc file
        shell: "/bin/zsh /home/{{ user }}/.zshrc"

      - name: Check if tmuxinator plugin manager is installed.
        stat:
          path: /home/{{ user }}/.tmux/plugins/tpm
        register: tpm_installed

      - name: Create tmux plugin directory
        file:
          state: directory
          path: /home/{{ user }}/.tmux/plugins

      - name: Install tmux plugin manager
        git:
          repo: 'https://github.com/tmux-plugins/tpm'
          dest: /home/{{ user }}/.tmux/plugins/tpm
        when: tpm_installed.stat.exists == False

      - name: Check if reboot is required
        stat:
          path: /var/run/reboot-required
        register: reboot_required

      #need to add something to kill the connection once it restarts
      - name: Reboot for any important updates
        reboot:
        when: reboot_required.stat.exists

     #should end the play if the remote server needs to reboot
      - meta: end_play
        when: reboot_required.stat.exists

    handlers:
      - name: Reload SSH
        service:
          name: sshd
          state: restarted
      - name: Restart Unattended Upgrades
        systemd:
          name: unattended-upgrades
          state: restarted
